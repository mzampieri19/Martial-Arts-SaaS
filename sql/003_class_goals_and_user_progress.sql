-- 003_class_goals_and_user_progress.sql

-- 1) Create `class_goals` table: static goals tied to a class
CREATE TABLE IF NOT EXISTS public.class_goals (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  class_id bigint NOT NULL REFERENCES public.classes(id) ON DELETE CASCADE,
  title text NOT NULL,
  description text,
  required_sessions integer DEFAULT 0,
  sort_order integer DEFAULT 100,
  created_at timestamptz NOT NULL DEFAULT timezone('utc', now())
);

-- 2) Create `user_goal_progress` table: tracks which goals a user has completed
CREATE TABLE IF NOT EXISTS public.user_goal_progress (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  goal_id bigint NOT NULL REFERENCES public.class_goals(id) ON DELETE CASCADE,
  completed_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
  notes text,
  CONSTRAINT user_goal_unique UNIQUE (user_id, goal_id)
);

-- 3) Enable RLS and policies
ALTER TABLE public.class_goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_goal_progress ENABLE ROW LEVEL SECURITY;

-- Allow anyone to read class_goals (public information)
CREATE POLICY "Public can read class goals"
  ON public.class_goals
  FOR SELECT
  USING (true);

-- Users can manage their own user_goal_progress rows
CREATE POLICY "Users can view their own goal progress"
  ON public.user_goal_progress
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own goal progress"
  ON public.user_goal_progress
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own goal progress"
  ON public.user_goal_progress
  FOR DELETE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own goal progress"
  ON public.user_goal_progress
  FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- 4) Optional: create a view joining goals with user completion for easy reads
CREATE OR REPLACE VIEW public.view_class_goals_with_progress AS
SELECT
  g.*,
  up.user_id IS NOT NULL AS completed,
  up.completed_at
FROM public.class_goals g
LEFT JOIN public.user_goal_progress up
  ON g.id = up.goal_id;

GRANT SELECT ON public.view_class_goals_with_progress TO authenticated;

-- 5) Insert sample goals for 'Karate Basics' and 'Advanced Judo' if those classes exist
INSERT INTO public.class_goals (class_id, title, description, required_sessions, sort_order)
VALUES
  ((SELECT id FROM public.classes WHERE class_name = 'Karate Basics' LIMIT 1), 'Stance & Footwork', 'Learn forward/backward stance and basic footwork', 3, 10),
  ((SELECT id FROM public.classes WHERE class_name = 'Karate Basics' LIMIT 1), 'Basic Punches', 'Jab, cross, and basic combinations', 4, 20),
  ((SELECT id FROM public.classes WHERE class_name = 'Karate Basics' LIMIT 1), 'Kihon Kata 1', 'First kata basic form', 5, 30),
  ((SELECT id FROM public.classes WHERE class_name = 'Advanced Judo' LIMIT 1), 'Breakfalls', 'Safe ukemi practice', 4, 10)
ON CONFLICT DO NOTHING;
